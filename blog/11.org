#+options: html-link-use-abs-url:nil html-postamble:t
#+options: html-preamble:t html-scripts:nil html-style:t
#+options: html5-fancy:nil tex:t toc:nil num:nil
#+html_doctype: xhtml-strict
#+html_container: div
#+html_content_class: content
#+description:
#+keywords:
#+html_link_home:
#+html_link_up:
#+html_mathjax:
#+html_equation_reference_format: \eqref{%s}
#+html_head: <link rel="stylesheet" type="text/css" href="./style.css"/>
#+html_head_extra:
#+title: SICP. 2.1--2.1.3
#+subtitle: 2023-02-28 Tue
#+infojs_opt:
#+creator: <a href="https://www.gnu.org/software/emacs/">Emacs</a> 28.2 (<a href="https://orgmode.org">Org</a> mode 9.5.5)
#+latex_header:

We got to the second chapter, which is entitled /Building Abstractions
with Data/.

* 2.1 Introduction to Data Abstraction

We can abstract not only with procedures, but also with compound
data. The notion for the latter is called /data abstraction/.

Using data abstraction, systems are divided into two parts. There is a
part that /uses/ data and there is a part that /defines/ data.

The part that uses data makes no assumptions about the data that are
not necessary for the task at hand. We say that this part operates on
``abstract data''.

The part that defines the data does so in a way which is independent
from the way data will be used by the other part of the system. We say
that the defining-data part defines a ``concrete'' data
representation.

The interface between the two parts consists of a set of two kinds
procedures: /selectors/ and /constructors/.

* 2.1.1 Example: Arithmetic Operations for Rational Numbers
A rational number is an entity made of a numerator and a denominator.

We don't have, at the moment, a way to construct a rational number,
given a numerator and a denominator. But suppose we /assume/ we
do. Not only that. We are also going to assume that given a rational
number, we have a way to extract the numerator and a way to extract
the denominator; and that we have a procedure for each of those three
things (~make-rat~ --- the constructor ---, ~numer~, and ~denom~ ---
the selectors).

Even without implementing those procedures, we can express in terms of
them the procedurs for adding, subtracting, etc.:

#+begin_src scheme
  (define (add-rat x y)
    (make-rat (+ (* (numer x) (denom y))
                 (* (numer y) (denom x)))
              (* (denom x) (denom y))))

  (define (sub-rat x y)
    (make-rat (- (* (numer x) (denom y))
                 (* (numer y) (denom x)))
              (* (denom x) (denom y))))

  (define (mul-rat x y)
    (make-rat (* (numer x) (numer y))
              (* (denom x) (denom y))))

  (define (div-rat x y)
    (make-rat (* (numer x) (denom y))
              (* (denom x) (numer y))))

  (define (equal-rat? x y)
    (= (* (numer x) (denom y))
       (* (numer y) (denom x))))
#+end_src

We have that a rational number is an entity made of two things. How do
we make a thing made of two things? It turns out that Scheme provides
us with a procedures that allows us to stick two things together into
a /pair/. I'm talking of the magical ~cons~. Once you have made with
pair with ~cons~, you can extract the first element with ~car~ and the
second element with ~cdr~. Data objects constructed from pairs are
called /list-structured/ data.

So, here is what we can do:
#+begin_src scheme
  (define (make-rat n d) (cons n d))
  (define (numer x) (car x))
  (define (denom x) (cdr x))
#+end_src

Actually better:
#+begin_src scheme
  (define (make-rat n d)
    (let ((g (gcd n d)))
      (cons (/ n g)
            (/ d g))))
#+end_src
* Exercise 2.1
Exercise:

#+begin_quote
Define a better version of make-rat that handles both positive and
negative arguments. Make-rat should normalize the sign so that if the
rational number is positive, both the numerator and denominator are
positive, and if the rational number is negative, only the numerator
is negative.
#+end_quote

Answer:
#+begin_src scheme
  (define (make-rat n d)
    (let ((g (gcd n d)))
      (if (or (and (> n 0) (> d 0))
              (and (< n 0) (< d 0)))
          (cons (/ (abs n) (abs g)) 
                (/ (abs d) (abs g)))
          (cons (- (/ (abs n) (abs g)))
                (/ (abs d) (abs g))))))

  (print-rat (make-rat 2 4))  ;; =>  1/2  
  (print-rat (make-rat -2 4)) ;; => -1/2
  (print-rat (make-rat 2 -4)) ;; => -1/2
#+end_src
