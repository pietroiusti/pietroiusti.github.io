#+options: html-link-use-abs-url:nil html-postamble:t
#+options: html-preamble:t html-scripts:nil html-style:t
#+options: html5-fancy:nil tex:t toc:nil num:nil
#+html_doctype: xhtml-strict
#+html_container: div
#+html_content_class: content
#+description:
#+keywords:
#+html_link_home:
#+html_link_up:
#+html_mathjax:
#+html_equation_reference_format: \eqref{%s}
#+html_head: <link rel="stylesheet" type="text/css" href="./style.css"/>
#+html_head_extra:
#+title: SICP 2.3.1 Quotation
#+subtitle: 2023-07-05 Wed
#+infojs_opt:
#+creator: <a href="https://www.gnu.org/software/emacs/">Emacs</a> 29.0.91 (<a href="https://orgmode.org">Org</a> mode 9.6.6)
#+latex_header:

#+begin_quote
In order to manipulate symbols we need a new element in our language:
the ability to quote a data object.
#+end_quote

~(list a b)~ constructs a list of the values of ~a~ and ~b~, not the
list of ~a~ and ~b~ themselves (the symbols).

As analytic philosophy students well know,

#+begin_quote
[t]his issue is well known in the context of natural languages, where
words and sentences may be regarded either as semantic entities or as
character strings (syntactic entities)...
#+end_quote

(In fact, footnote 98 uses an example from Frege.)

#+begin_quote
We can follow this same practice to identify lists and symbols that
are to be treated as data objects rather than as expressions to be
evaluated.
#+end_quote

* Ex. 2.53
*Exercise*:

#+begin_quote
What would the interpreter print in response to evaluating each of the
following expressions?

#+begin_src scheme
  (list 'a 'b 'c)
  (list (list 'george))
  (cdr '((x1 x2) (y1 y2)))
  (cadr '((x1 x2) (y1 y2)))
  (pair? (car '(a short list)))
  (memq 'red '((red shoes) (blue socks)))
  (memq 'red '(red shoes blue socks))
#+end_src
#+end_quote

*Answer*:

#+begin_src scheme
  (list 'a 'b 'c)
  ;; => (a b c)
  (list (list 'george))
  ;; => ((george))
  (cdr '((x1 x2) (y1 y2)))
  ;; => ((y1 y2))
  (cadr '((x1 x2) (y1 y2)))
  ;; => (y1 y2)
  (pair? (car '(a short list)))
  ;; => #f
  (memq 'red '((red shoes) (blue socks)))
  ;; => #f
  (memq 'red '(red shoes blue socks))
  ;; => (red shoes blue socks)
#+end_src

* Ex. 2.54
*Exercise*:

#+begin_quote
Two lists are said to be ~equal?~ if they contain equal elements
arranged in the same order. For example,

#+begin_src scheme
  (equal? '(this is a list) 
          '(this is a list))
#+end_src

is true, but

#+begin_src scheme
  (equal? '(this is a list) 
          '(this (is a) list))
#+end_src

is false. To be more precise, we can define ~equal?~ recursively in
terms of the basic ~eq?~ equality of symbols by saying that ~a~ and
~b~ are ~equal?~ if they are both symbols and the symbols are ~eq?~,
or if they are both lists such that ~(car a)~ is ~equal?~ to ~(car b)~
and ~(cdr a)~ is ~equal?~ to ~(cdr b)~. Using this idea, implement
~equal?~ as a procedure.
#+end_quote

*Answer*:

#+begin_src scheme
  (define (equal? a b)
    (cond ((and (not (pair? a)) (not (pair? b)) (eq? a b))
           true)
          ((and (and (pair? a) (pair? b))
                (equal? (car a) (car b))
                (equal? (cdr a) (cdr b)))
           true)
          (else false)))
#+end_src

* Ex. 2.55
*Exercise*:

#+begin_quote
Eva Lu Ator types to the interpreter the expression

#+begin_src scheme
  (car ''abracadabra)
#+end_src

To her surprise, the interpreter prints back quote. Explain.
#+end_quote

*Answer*:

From the interpreter's perspective, ~'abracadabra~ is actually ~(quote
abracadabra)~ (see footnote 100). And ~''abracadabra~ is actually
~(quote (quote abracadabra))~. The ~car~ of the latter is indeed
~quote~.

#+begin_export html
<div style="text-align: center;">
<a href="./posts.html">‚Üê</a>
</div>
#+end_export
