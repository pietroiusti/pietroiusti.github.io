#+options: html-link-use-abs-url:nil html-postamble:t
#+options: html-preamble:t html-scripts:nil html-style:t
#+options: html5-fancy:nil tex:t toc:nil num:nil
#+html_doctype: xhtml-strict
#+html_container: div
#+html_content_class: content
#+description:
#+keywords:
#+html_link_home:
#+html_link_up:
#+html_mathjax:
#+html_equation_reference_format: \eqref{%s}
#+html_head: <link rel="stylesheet" type="text/css" href="./style.css"/>
#+html_head_extra:
#+title: SICP. 2.2--2.2.1
#+subtitle: 2023-03-29 Wed (updated on 2023-04-17 Mon)
#+infojs_opt:
#+creator: <a href="https://www.gnu.org/software/emacs/">Emacs</a> 28.2 (<a href="https://orgmode.org">Org</a> mode 9.5.5)
#+latex_header:

* 2.2 Hierarchical Data and the Closure Property

~Cons~ is used to ``glue`` two things together into a /pair/. This
allows us to construct compound data.

We can represent a pair using the so-called /box-and-pointer
notation/. This latter notation represents each object as a /pointer/
to a box (the box for a pair is actually a double box):

#+begin_src
*Figure 2.2:* Box-and-pointer representation of `(cons 1 2)'.

          +---+---+     +---+
     ---->| * | *-+---->| 2 |
          +-|-+---+     +---+
            |
            V
          +---+
          | 1 |
          +---+

[Figure from SICP Unofficial Texinfo Format version 2.neilvandyke4 (January 10, 2007)]
#+end_src

#+begin_quote
We have already seen that cons can be used to combine not only numbers
but pairs as well. [...] As a consequence, pairs provide /a universal
building block/ from which we can construct all sorts of data
structures. (p. 97, my emphasis)
#+end_quote

The authors refer to the ability to create pairs whose elements are
pairs as the /closure property/ of cons, borrowing the term from
abstract algebra.

#+begin_quote
Closure is the key to power in any means of combination because it
permits us to create /hierarchical structures/ --- structures made up
of parts, which themselves are made up of parts, and so on. (p. 98)
#+end_quote
** 2.2.1 Representing Sequences
A sequence is a structure; it is an ordered collection of data
objects.

We can build such a sequence in terms of pairs.There are many ways to
build a sequence in terms of pairs.  One way to do it, a particularly
straightforward one, is to represent a sequence as a what the authors
call /list/. A list is defined as ``a chain pairs terminated by the
end-of-the-list marker''.  More precisely: a list is a chain of one or
more pairs, each of which is the ~cdr~ of the previous one, and the
last one of which has ~nil~ as its ~cdr~.[fn::The Racket documentation
defines a list as ``a combination of pairs that creates a linked
list. More precisely, a list is either the empty list null, or it is a
pair whose first element is a list element and whose second element is
a list.'']

Here is how we would represent the sequence 1,2,3,4 as a list:
#+begin_src scheme
  (cons 1
	(cons 2
	      (cons 3
		    (cons 4 nil))))
#+end_src

Scheme provide the primitive ~list~ to create such sequences.
#+begin_src
  (list <a_1> <a_2> ... <a_n>)
#+end_src
is equivalent to
#+begin_src
  (cons ⟨a_1⟩
        (cons ⟨a_2⟩
              (cons ...
                    (cons ⟨a_n⟩
                     nil)...)))
#+end_src

Do not confuse ~(list 1 2 3 4)~ with ~(1 2 3 4)~...

~car~, ~cdr~, ~cadr~, etc. are introduced. ~nil~ can be thought of as
a sequence with no elements, the ~empty list~.

Some typical list operations:

- ~length~:
  - recursive-process-evolving: 
    #+begin_src scheme
      (define (length items)
        (if (null? items)
            0
            (+ 1 (length (cdr items)))))
    #+end_src
  - iterative-process-evolving:
    #+begin_src scheme
      (define (length items)
        (define (length-iter a count)
          (if (null? items)
              count
              (length-iter (cdr a) (+ 1 count))))
        (length-iter items 0))
    #+end_src
- ~list-ref~:
  #+begin_src scheme
    (define (list-ref items n)
      (if (= n 0)
          (car items)
          (list-ref (cdr items) (- n 1))))
  #+end_src
- ~append~:
  #+begin_src scheme
    (define (append list1 list2)
      (if (null? list1)
          list2
          (cons (car list1)
                (append (cdr list1) list2))))
  #+end_src
- ~map~:
#+begin_src scheme
  (define (map proc items)
    (if (null? items)
        nil
        (cons (proc (car items))
              (map proc (cdr items)))))
#+end_src

These operations above exemplify the techniques of ``cdring down'' and
``consing up''.

~map~ deserves some comments, for not only it represents a common
pattern, but it also ``establishes a higher level of abstraction in
dealing with lists''.

Consider:
#+begin_src scheme
  (define (scale-list items factor)
    (if (null? items)
        nil
        (cons (* (car items) factor)
              (scale-list (cdr items) factor))))

  (scale-list (list 1 2 3 4 5) 10)
  (10 20 30 40 50)
#+end_src

Now consider a definition of ~scale-list~ in terms of ~map~:
#+begin_src scheme
(define (scale-list items factor)
       (map (lambda (x) (* x factor))
            items))
#+end_src

The definition of ~scale-list~ in terms of ~map~ ``suppresses that
level of detail and emphasizes that scaling transforms a list of
elements to a list of results.'' ``...this abstraction gives us the
flexibility to change the low-level details of how sequences are
implemented, while preserving the conceptual framework of operations
that transform sequences to sequences.''

** Exercise 2.17
*Exercise*:

#+begin_quote
Define a procedure last-pair that returns the list that contains only
the last element of a given (nonempty) list:
#+begin_src scheme
  (last-pair (list 23 72 149 34))
  (34)
#+end_src
#+end_quote

*Answer*:

#+begin_src scheme
  (define (last-pair l)
    (if (null? (cdr l))
        l
        (last-pair (cdr l))))
#+end_src

** Exercise 2.18
*Exercise*:

#+begin_quote
Define a procedure `reverse' that takes a list as argument and returns
a list of the same elements in reverse order:

#+begin_src scheme
  (reverse (list 1 4 9 16 25))
  (25 16 9 4 1)
#+end_src
#+end_quote

*Answer*:

My intuitive solution was interative:
#+begin_src scheme
  (define (reverse l)
    (define (reverse-iter l result)
      (if (null? l)
          result
          (reverse-iter (cdr l) (cons (car l) result))))
    (reverse-iter l (list)))
#+end_src

After having solved the exercise iteratively, I've looked for a
recursive solution on the web and I've found this one:
#+begin_src scheme
  (define (reverse l)
    (if (null? l)
        nil
        (append (reverse (cdr l))
                (list (car l)))))
#+end_src

*** Exercise 2.20
*Exercise*:

#+begin_quote
The procedures ~+~, ~*~, and ~list~ take arbitrary numbers of
arguments. One way to ~define~ such procedures is to use define with
/dotted-tail/ notation. In a procedure definition, a parameter list
that has a dot before the last parameter name indicates that, when the
procedure is called, the initial parameters (if any) will have as
values the initial arguments, as usual, but the final parameter’s
value will be a /list/ of any remaining arguments. For instance, given
the definition

#+begin_src
(define (f x y . z) ⟨body⟩)
#+end_src

the procedure ~f~ can be called with two or more arguments. If we
evaluate

#+begin_src
(f 1 2 3 4 5 6)
#+end_src

then in the body of ~f~, ~x~ will be 1, ~y~ will be 2, and ~z~ will be
the list ~(3 4 5 6)~. Given the definition

#+begin_src
(define (g . w) ⟨body⟩)
#+end_src

the procedure g can be called with zero or more arguments. If we
evaluate

#+begin_src
(g 1 2 3 4 5 6)
#+end_src

then in the body of g, w will be the list ~(1 2 3 4 5 6)~.

[
fn: To define f and g using lambda we would write
#+begin_src
(define f (lambda (x y . z) ⟨body⟩))
(define g (lambda w ⟨body⟩))
#+end_src
]

Use this notation to write a procedure same-parity that takes one or
more integers and returns a list of all the arguments that have the
same even-odd parity as the first argument. For example,

#+begin_src
(same-parity 1 2 3 4 5 6 7)
(1 3 5 7)

(same-parity 2 3 4 5 6 7)
(2 4 6)  
#+end_src

#+end_quote

*Answer*:

#+begin_src scheme
  ;; iterative solution (three slightly different versions):

  (define (same-parity1 i . rest)
    (define (condition i1 i2)
      (= (remainder i1 2)
         (remainder i2 2)))
    (define (same-party-inner i l result)
      (if (null? l)
          result
          (same-party-inner i
                            (cdr l)
                            (if (condition i (car l))
                                (cons (car l) result)
                                result))))
    (cons i (reverse (same-party-inner i rest (list)))))

  (define (same-parity2 i . rest)
    (define (condition i1 i2)
      (= (remainder i1 2)
         (remainder i2 2)))
    (define (same-party-inner i l result)
      (if (null? l)
          result
          (same-party-inner i
                            (cdr l)
                            (if (condition i (car l))
                                (cons (car l) result)
                                result))))
    (reverse (same-party-inner i rest (list i))))

  (define (same-parity3 i . rest)
    (define (condition i1 i2)
      (= (remainder i1 2)
         (remainder i2 2)))
    (define (same-party-inner i l result)
      (if (null? l)
          result
          (same-party-inner i
                            (cdr l)
                            (if (condition i (car l))
                                (append result (list (car l)))
                                result))))
    (same-party-inner i rest (list i)))

  (same-parity1 1 2 3 4 5 6 7) ;; (1 3 5 7)
  (same-parity2 1 2 3 4 5 6 7) ;; (1 3 5 7)
  (same-parity3 1 2 3 4 5 6 7) ;; (1 3 5 7)

#+end_src


#+begin_export html
<div style="text-align: center;">
<a href="./posts.html">←</a>
</div>
#+end_export
